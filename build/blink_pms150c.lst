                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.0 #14620 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mpdk13
                                      7 	
                                      8 
                                      9 ; default segment ordering in RAM for linker
                                     10 	.area DATA
                                     11 	.area OSEG (OVR,DATA)
                                     12 
                                     13 ;--------------------------------------------------------
                                     14 ; Public variables in this module
                                     15 ;--------------------------------------------------------
                                     16 	.globl _toggle_led_PARM_1
                                     17 	.globl _lfsr_shift_PARM_1
                                     18 	.globl _main
                                     19 	.globl _handle_tick
                                     20 	.globl _load_next_delay_target
                                     21 	.globl _flash_led
                                     22 	.globl _toggle_led
                                     23 	.globl _lfsr_init
                                     24 	.globl _lfsr_shift
                                     25 	.globl _get_initial_psudo_rnd
                                     26 	.globl _sys_init
                                     27 	.globl __t16c
                                     28 	.globl __ilrcr
                                     29 	.globl __gpcs
                                     30 	.globl __tm2ct
                                     31 	.globl __tm2c
                                     32 	.globl __misc
                                     33 	.globl __gpcc
                                     34 	.globl __bgtr
                                     35 	.globl __tm2s
                                     36 	.globl __paph
                                     37 	.globl __pac
                                     38 	.globl __pa
                                     39 	.globl __padier
                                     40 	.globl __integs
                                     41 	.globl __ihrcr
                                     42 	.globl __eoscr
                                     43 	.globl __tm2b
                                     44 	.globl __t16m
                                     45 	.globl __intrq
                                     46 	.globl __inten
                                     47 	.globl __clkmd
                                     48 	.globl __sp
                                     49 	.globl __flag
                                     50 	.globl _load_next_delay_target_PARM_1
                                     51 	.globl _flash_led_PARM_1
                                     52 	.globl _rnd_regs
                                     53 	.globl _leds
                                     54 ;--------------------------------------------------------
                                     55 ; special function registers
                                     56 ;--------------------------------------------------------
                                     57 	.area RSEG (ABS)
      000000                         58 	.org 0x0000
                           000000    59 __flag	=	0x0000
                           000002    60 __sp	=	0x0002
                           000003    61 __clkmd	=	0x0003
                           000004    62 __inten	=	0x0004
                           000005    63 __intrq	=	0x0005
                           000006    64 __t16m	=	0x0006
                           000009    65 __tm2b	=	0x0009
                           00000A    66 __eoscr	=	0x000a
                           00000B    67 __ihrcr	=	0x000b
                           00000C    68 __integs	=	0x000c
                           00000D    69 __padier	=	0x000d
                           000010    70 __pa	=	0x0010
                           000011    71 __pac	=	0x0011
                           000012    72 __paph	=	0x0012
                           000017    73 __tm2s	=	0x0017
                           000019    74 __bgtr	=	0x0019
                           00001A    75 __gpcc	=	0x001a
                           00001B    76 __misc	=	0x001b
                           00001C    77 __tm2c	=	0x001c
                           00001D    78 __tm2ct	=	0x001d
                           00001E    79 __gpcs	=	0x001e
                           00001F    80 __ilrcr	=	0x001f
      000000                         81 __t16c::
      000000                         82 	.ds 2
                                     83 ;--------------------------------------------------------
                                     84 ; ram data
                                     85 ;--------------------------------------------------------
                                     86 	.area DATA
      000000                         87 _leds::
      000000                         88 	.ds 10
      00000A                         89 _rnd_regs::
      00000A                         90 	.ds 4
      00000E                         91 _lfsr_init_sloc9_1_0:
      00000E                         92 	.ds 1
      00000F                         93 _flash_led_PARM_1:
      00000F                         94 	.ds 1
      000010                         95 _flash_led_sloc12_1_0:
      000010                         96 	.ds 1
      000011                         97 _load_next_delay_target_PARM_1:
      000011                         98 	.ds 1
      000012                         99 _load_next_delay_target_sloc13_1_0:
      000012                        100 	.ds 1
      000013                        101 _load_next_delay_target_sloc14_1_0:
      000013                        102 	.ds 1
      000014                        103 _load_next_delay_target_sloc15_1_0:
      000014                        104 	.ds 1
      000015                        105 _load_next_delay_target_sloc16_1_0:
      000015                        106 	.ds 1
      000016                        107 _handle_tick_sloc17_1_0:
      000016                        108 	.ds 1
      000017                        109 _handle_tick_sloc18_1_0:
      000017                        110 	.ds 1
      000018                        111 _handle_tick_sloc19_1_0:
      000018                        112 	.ds 1
      000019                        113 _handle_tick_sloc20_1_0:
      000019                        114 	.ds 1
      00001A                        115 _main_sloc21_1_0:
      00001A                        116 	.ds 2
                                    117 ;--------------------------------------------------------
                                    118 ; overlayable items in ram
                                    119 ;--------------------------------------------------------
                                    120 	.area	OSEG (OVR,DATA)
      000000                        121 _get_initial_psudo_rnd_sloc0_1_0:
      000000                        122 	.ds 1
      000001                        123 _get_initial_psudo_rnd_sloc1_1_0:
      000001                        124 	.ds 1
      000002                        125 _get_initial_psudo_rnd_sloc2_1_0:
      000002                        126 	.ds 1
                                    127 	.area	OSEG (OVR,DATA)
      000000                        128 _lfsr_shift_PARM_1:
      000000                        129 	.ds 1
      000001                        130 _lfsr_shift_sloc3_1_0:
      000001                        131 	.ds 1
      000002                        132 _lfsr_shift_sloc4_1_0:
      000002                        133 	.ds 1
      000003                        134 _lfsr_shift_sloc5_1_0:
      000003                        135 	.ds 1
      000004                        136 _lfsr_shift_sloc6_1_0:
      000004                        137 	.ds 1
      000005                        138 _lfsr_shift_sloc7_1_0:
      000005                        139 	.ds 1
      000006                        140 _lfsr_shift_sloc8_1_0:
      000006                        141 	.ds 1
                                    142 	.area	OSEG (OVR,DATA)
      000000                        143 _toggle_led_PARM_1:
      000000                        144 	.ds 1
      000001                        145 _toggle_led_sloc10_1_0:
      000001                        146 	.ds 1
      000002                        147 _toggle_led_sloc11_1_0:
      000002                        148 	.ds 1
                                    149 ;--------------------------------------------------------
                                    150 ; Stack segment in internal ram
                                    151 ;--------------------------------------------------------
                                    152 	.area SSEG
      000000                        153 __start__stack:
      000000                        154 	.ds	1
                                    155 
                                    156 ;--------------------------------------------------------
                                    157 ; absolute external ram data
                                    158 ;--------------------------------------------------------
                                    159 	.area DABS (ABS)
                                    160 ;--------------------------------------------------------
                                    161 ; interrupt vector
                                    162 ;--------------------------------------------------------
                                    163 	.area HOME
      000000                        164 __interrupt_vect:
                                    165 	.area	HEADER (ABS)
      000020                        166 	.org	 0x0020
      000020 3B 00                  167 	reti
                                    168 ;--------------------------------------------------------
                                    169 ; global & static initialisations
                                    170 ;--------------------------------------------------------
                                    171 	.area HOME
                                    172 	.area GSINIT
                                    173 	.area GSFINAL
                                    174 	.area GSINIT
                                    175 	.area	PREG (ABS)
      000000                        176 	.org 0x00
      000000                        177 p::
      000000                        178 	.ds 2
                                    179 	.area	HEADER (ABS)
      000000                        180 	.org 0x0000
      000000 00 00                  181 	nop
      000002r81r09                  182 	clear	p+1
      000004r00r17                  183 	mov	a, #s_OSEG
      000006r01r10                  184 	add	a, #l_OSEG + 1
      000008 FE 14                  185 	and	a, #0xfe
      00000A 82 00                  186 	mov.io	sp, a
      00000Cr00r1C                  187 	call	___sdcc_external_startup
      00000E 18 00                  188 	not	a
      000010 FF 12                  189 	ceqsn	a, #0xFF
      000012r00r18                  190 	goto	__sdcc_program_startup
      000014r00r18                  191 	goto	__sdcc_init_data
                                    192 	.area GSINIT
      000000                        193 __sdcc_init_data:
      000000r00r17                  194 	mov	a, #s_DATA
      000002rC0r05                  195 	mov	p, a
      000004r0Er18                  196 	goto	00002$
      000006                        197 00001$:
      000006 00 17                  198 	mov	a, #0x00
      000008rE0r00                  199 	idxm	p, a
      00000Ar00r09                  200 	inc	p
      00000Cr00r17                  201 	mov	a, #s_DATA
      00000E                        202 00002$:
      00000Er00r10                  203 	add	a, #l_DATA
      000010r80r0B                  204 	ceqsn	a, p
      000012r06r18                  205 	goto	00001$
                                    206 ;	main.c: 33: LED_REG leds[] = {
      000014 04 17                  207 	mov	a, #0x04
      000016rC0r05                  208 	mov	_leds+0, a
      000018 05 17                  209 	mov	a, #0x05
      00001ArC5r05                  210 	mov	_leds+5, a
      00001Cr81r09                  211 	clear	_leds+1
      00001Er86r09                  212 	clear	_leds+6
      000020 BB 17                  213 	mov	a, #0xbb
      000022rC2r05                  214 	mov	_leds+2, a
      000024 AA 17                  215 	mov	a, #0xaa
      000026rC7r05                  216 	mov	_leds+7, a
      000028r84r09                  217 	clear	_leds+4
      00002Ar89r09                  218 	clear	_leds+9
      00002C 01 17                  219 	mov	a, #0x01
      00002ErC3r05                  220 	mov	_leds+3, a
      000030 01 17                  221 	mov	a, #0x01
      000032rC8r05                  222 	mov	_leds+8, a
                                    223 	.area GSFINAL
      000000r00r18                  224 	goto	__sdcc_program_startup
                                    225 ;--------------------------------------------------------
                                    226 ; Home
                                    227 ;--------------------------------------------------------
                                    228 	.area HOME
                                    229 	.area HOME
      000000                        230 __sdcc_program_startup:
      000000r5Cr1A                  231 	goto	_main
                                    232 ;	return from main will return to caller
                                    233 ;--------------------------------------------------------
                                    234 ; code
                                    235 ;--------------------------------------------------------
                                    236 	.area CODE
                                    237 ;	main.c: 49: void sys_init()
                                    238 ;	-----------------------------------------
                                    239 ;	 function sys_init
                                    240 ;	-----------------------------------------
      000000                        241 _sys_init:
                                    242 ;	main.c: 51: CLKMD &= ~(CLKMD_ENABLE_WATCHDOG);
      000000 23 0E                  243 	set0.io	__clkmd, #1
                                    244 ;	main.c: 52: PAC |= LED_SHIFT(LED_BIT_0) | LED_SHIFT(LED_BIT_1);
      000002 B1 00                  245 	mov.io	a, __pac
      000004 30 15                  246 	or	a, #0x30
      000006 91 00                  247 	mov.io	__pac, a
                                    248 ;	main.c: 53: LED_OFF(leds[0].led);
      000008rC0r07                  249 	mov	a, _leds+0
      00000A 32 00                  250 	push	af
      00000C 01 17                  251 	mov	a, #0x01
      00000ErC0r05                  252 	mov	p, a
      000010 33 00                  253 	pop	af
      000012                        254 00103$:
      000012 01 11                  255 	sub	a, #1
      000014 20 0C                  256 	t0sn.io	f, c
      000016r1Cr18                  257 	goto	00104$
      000018                        258 00105$:
      000018rC0r0A                  259 	sl	p
      00001Ar12r18                  260 	goto	00103$
      00001C                        261 00104$:
      00001C B0 00                  262 	mov.io	a, __pa
      00001Er40r07                  263 	or	a, p
      000020 90 00                  264 	mov.io	__pa, a
                                    265 ;	main.c: 54: LED_OFF(leds[1].led);
      000022rC5r07                  266 	mov	a, _leds+5
      000024 32 00                  267 	push	af
      000026 01 17                  268 	mov	a, #0x01
      000028rC0r05                  269 	mov	p, a
      00002A 33 00                  270 	pop	af
      00002C                        271 00106$:
      00002C 01 11                  272 	sub	a, #1
      00002E 20 0C                  273 	t0sn.io	f, c
      000030r36r18                  274 	goto	00107$
      000032                        275 00108$:
      000032rC0r0A                  276 	sl	p
      000034r2Cr18                  277 	goto	00106$
      000036                        278 00107$:
      000036 B0 00                  279 	mov.io	a, __pa
      000038r40r07                  280 	or	a, p
      00003A 90 00                  281 	mov.io	__pa, a
                                    282 ;	main.c: 55: }
      00003C 3A 00                  283 	ret
                                    284 ;	main.c: 60: uint8_t get_initial_psudo_rnd()
                                    285 ;	-----------------------------------------
                                    286 ;	 function get_initial_psudo_rnd
                                    287 ;	-----------------------------------------
      00003E                        288 _get_initial_psudo_rnd:
                                    289 ;	main.c: 62: uint8_t res = rnd_regs[0];
      00003ErCAr07                  290 	mov	a, _rnd_regs+0
      000040rC0r05                  291 	mov	_get_initial_psudo_rnd_sloc0_1_0+0, a
                                    292 ;	main.c: 63: res ^= rnd_regs[1];
      000042rCBr07                  293 	mov	a, _rnd_regs+1
      000044r80r07                  294 	xor	a, _get_initial_psudo_rnd_sloc0_1_0+0
      000046rC1r05                  295 	mov	_get_initial_psudo_rnd_sloc1_1_0+0, a
                                    296 ;	main.c: 64: res ^= rnd_regs[2];
      000048rCCr07                  297 	mov	a, _rnd_regs+2
      00004Ar81r07                  298 	xor	a, _get_initial_psudo_rnd_sloc1_1_0+0
      00004CrC2r05                  299 	mov	_get_initial_psudo_rnd_sloc2_1_0+0, a
                                    300 ;	main.c: 65: res ^= rnd_regs[3];
      00004ErCDr07                  301 	mov	a, _rnd_regs+3
      000050r82r07                  302 	xor	a, _get_initial_psudo_rnd_sloc2_1_0+0
                                    303 ;	main.c: 66: return res;
                                    304 ;	main.c: 67: }
      000052 3A 00                  305 	ret
                                    306 ;	main.c: 70: uint8_t lfsr_shift(uint8_t index)
                                    307 ;	-----------------------------------------
                                    308 ;	 function lfsr_shift
                                    309 ;	-----------------------------------------
      000054                        310 _lfsr_shift:
                                    311 ;	main.c: 72: uint8_t first_bit = 0x01 & leds[index].lfs_reg; 
      000054rC0r07                  312 	mov	a, _lfsr_shift_PARM_1+0
      000056 1B 00                  313 	sl	a
      000058 1B 00                  314 	sl	a
      00005Ar00r06                  315 	add	a, _lfsr_shift_PARM_1+0
      00005Cr00r10                  316 	add	a, #(_leds + 0)
      00005E 02 10                  317 	add	a, #0x02
      000060rC1r05                  318 	mov	_lfsr_shift_sloc3_1_0+0, a
      000062rC0r05                  319 	mov	p, a
      000064rE1r00                  320 	idxm	a, p
      000066rC2r05                  321 	mov	_lfsr_shift_sloc4_1_0+0, a
      000068 01 14                  322 	and	a, #0x01
      00006ArC3r05                  323 	mov	_lfsr_shift_sloc5_1_0+0, a
                                    324 ;	main.c: 73: uint8_t next_bit = leds[index].lfs_reg & 0x01;
      00006CrC0r05                  325 	mov	p, a
                                    326 ;	main.c: 74: next_bit ^= (leds[index].lfs_reg >> 4) & 0x01;
      00006ErC2r07                  327 	mov	a, _lfsr_shift_sloc4_1_0+0
      000070 1E 00                  328 	swap	a
      000072 0F 14                  329 	and	a, #0x0f
      000074 01 14                  330 	and	a, #0x01
      000076r80r05                  331 	xor	p, a
                                    332 ;	main.c: 75: next_bit ^= (leds[index].lfs_reg >> 3) & 0x01;
      000078rC2r07                  333 	mov	a, _lfsr_shift_sloc4_1_0+0
      00007A 1A 00                  334 	sr	a
      00007C 1A 00                  335 	sr	a
      00007E 1A 00                  336 	sr	a
      000080 01 14                  337 	and	a, #0x01
      000082r80r05                  338 	xor	p, a
                                    339 ;	main.c: 76: next_bit ^= (leds[index].lfs_reg >> 2) & 0x01;
      000084rC2r07                  340 	mov	a, _lfsr_shift_sloc4_1_0+0
      000086 1A 00                  341 	sr	a
      000088 1A 00                  342 	sr	a
      00008A 01 14                  343 	and	a, #0x01
      00008Cr80r07                  344 	xor	a, p
      00008ErC4r05                  345 	mov	_lfsr_shift_sloc6_1_0+0, a
                                    346 ;	main.c: 78: leds[index].lfs_reg >>= 1;
      000090rC2r07                  347 	mov	a, _lfsr_shift_sloc4_1_0+0
      000092rC5r05                  348 	mov	_lfsr_shift_sloc7_1_0+0, a
      000094r85r0A                  349 	sr	_lfsr_shift_sloc7_1_0+0
      000096rC1r07                  350 	mov	a, _lfsr_shift_sloc3_1_0+0
      000098rC0r05                  351 	mov	p, a
      00009ArC5r07                  352 	mov	a, _lfsr_shift_sloc7_1_0+0
      00009CrE0r00                  353 	idxm	p, a
                                    354 ;	main.c: 79: leds[index].lfs_reg |= (next_bit << 7) & 0x80;
      00009ErC4r07                  355 	mov	a, _lfsr_shift_sloc6_1_0+0
      0000A0 1A 00                  356 	sr	a
      0000A2 00 17                  357 	mov	a, #0x00
      0000A4 1C 00                  358 	src	a
      0000A6 80 14                  359 	and	a, #0x80
      0000A8r45r07                  360 	or	a, _lfsr_shift_sloc7_1_0+0
      0000AArC6r05                  361 	mov	_lfsr_shift_sloc8_1_0+0, a
      0000ACrC1r07                  362 	mov	a, _lfsr_shift_sloc3_1_0+0
      0000AErC0r05                  363 	mov	p, a
      0000B0rC6r07                  364 	mov	a, _lfsr_shift_sloc8_1_0+0
      0000B2rE0r00                  365 	idxm	p, a
                                    366 ;	main.c: 81: rnd_regs[index] = leds[index].lfs_reg;
      0000B4r0Ar17                  367 	mov	a, #(_rnd_regs + 0)
      0000B6r00r06                  368 	add	a, _lfsr_shift_PARM_1+0
      0000B8rC0r05                  369 	mov	p, a
      0000BArC6r07                  370 	mov	a, _lfsr_shift_sloc8_1_0+0
      0000BCrE0r00                  371 	idxm	p, a
                                    372 ;	main.c: 82: rnd_regs[index+2] = leds[index].lfs_reg;
      0000BErC0r07                  373 	mov	a, _lfsr_shift_PARM_1+0
      0000C0 02 10                  374 	add	a, #0x02
      0000C2r0Ar10                  375 	add	a, #(_rnd_regs + 0)
      0000C4 32 00                  376 	push	af
      0000C6rC1r07                  377 	mov	a, _lfsr_shift_sloc3_1_0+0
      0000C8rC0r05                  378 	mov	p, a
      0000CArE1r00                  379 	idxm	a, p
      0000CCrC0r05                  380 	mov	p, a
      0000CE 33 00                  381 	pop	af
      0000D0rC0r09                  382 	xch	a, p
      0000D2rE0r00                  383 	idxm	p, a
                                    384 ;	main.c: 83: return first_bit;
      0000D4rC3r07                  385 	mov	a, _lfsr_shift_sloc5_1_0+0
                                    386 ;	main.c: 84: }
      0000D6 3A 00                  387 	ret
                                    388 ;	main.c: 87: void lfsr_init()
                                    389 ;	-----------------------------------------
                                    390 ;	 function lfsr_init
                                    391 ;	-----------------------------------------
      0000D8                        392 _lfsr_init:
                                    393 ;	main.c: 89: for (uint8_t i = 0; i < get_initial_psudo_rnd(); i++)
      0000D8r8Er09                  394 	clear	_lfsr_init_sloc9_1_0+0
      0000DA                        395 00103$:
      0000DAr3Er1C                  396 	call	_get_initial_psudo_rnd
      0000DCrC0r05                  397 	mov	p, a
      0000DErCEr07                  398 	mov	a, _lfsr_init_sloc9_1_0+0
      0000E0r40r06                  399 	sub	a, p
      0000E2 20 0D                  400 	t1sn.io	f, c
      0000E4rF4r18                  401 	goto	00105$
      0000E6                        402 00120$:
                                    403 ;	main.c: 91: lfsr_shift(0);
      0000E6r80r09                  404 	clear	_lfsr_shift_PARM_1+0
      0000E8r54r1C                  405 	call	_lfsr_shift
                                    406 ;	main.c: 92: lfsr_shift(1);
      0000EA 01 17                  407 	mov	a, #0x01
      0000ECrC0r05                  408 	mov	_lfsr_shift_PARM_1+0, a
      0000EEr54r1C                  409 	call	_lfsr_shift
                                    410 ;	main.c: 89: for (uint8_t i = 0; i < get_initial_psudo_rnd(); i++)
      0000F0r0Er09                  411 	inc	_lfsr_init_sloc9_1_0+0
      0000F2rDAr18                  412 	goto	00103$
      0000F4                        413 00105$:
                                    414 ;	main.c: 95: }
      0000F4 3A 00                  415 	ret
                                    416 ;	main.c: 97: void toggle_led(uint8_t index)
                                    417 ;	-----------------------------------------
                                    418 ;	 function toggle_led
                                    419 ;	-----------------------------------------
      0000F6                        420 _toggle_led:
                                    421 ;	main.c: 99: if (leds[index].on)
      0000F6rC0r07                  422 	mov	a, _toggle_led_PARM_1+0
      0000F8 1B 00                  423 	sl	a
      0000FA 1B 00                  424 	sl	a
      0000FCr00r06                  425 	add	a, _toggle_led_PARM_1+0
      0000FEr00r10                  426 	add	a, #(_leds + 0)
      000100rC1r05                  427 	mov	_toggle_led_sloc10_1_0+0, a
      000102 01 10                  428 	add	a, #0x01
      000104rC2r05                  429 	mov	_toggle_led_sloc11_1_0+0, a
      000106rC0r05                  430 	mov	p, a
      000108rE1r00                  431 	idxm	a, p
      00010A 00 12                  432 	ceqsn	a, #0x00
      00010Cr10r19                  433 	goto	00112$
      00010E                        434 00113$:
      00010Er38r19                  435 	goto	00102$
      000110                        436 00112$:
                                    437 ;	main.c: 101: LED_OFF(leds[index].led);
      000110rC1r07                  438 	mov	a, _toggle_led_sloc10_1_0+0
      000112rC0r05                  439 	mov	p, a
      000114rE1r00                  440 	idxm	a, p
      000116 32 00                  441 	push	af
      000118 01 17                  442 	mov	a, #0x01
      00011ArC0r05                  443 	mov	p, a
      00011C 33 00                  444 	pop	af
      00011E                        445 00114$:
      00011E 01 11                  446 	sub	a, #1
      000120 20 0C                  447 	t0sn.io	f, c
      000122r28r19                  448 	goto	00115$
      000124                        449 00116$:
      000124rC0r0A                  450 	sl	p
      000126r1Er19                  451 	goto	00114$
      000128                        452 00115$:
      000128 B0 00                  453 	mov.io	a, __pa
      00012Ar40r07                  454 	or	a, p
      00012C 90 00                  455 	mov.io	__pa, a
                                    456 ;	main.c: 102: leds[index].on = 0;
      00012ErC2r07                  457 	mov	a, _toggle_led_sloc11_1_0+0
      000130rC0r05                  458 	mov	p, a
      000132 00 17                  459 	mov	a, #0x00
      000134rE0r00                  460 	idxm	p, a
      000136r60r19                  461 	goto	00104$
      000138                        462 00102$:
                                    463 ;	main.c: 106: LED_ON(leds[index].led);
      000138rC1r07                  464 	mov	a, _toggle_led_sloc10_1_0+0
      00013ArC0r05                  465 	mov	p, a
      00013CrE1r00                  466 	idxm	a, p
      00013E 32 00                  467 	push	af
      000140 01 17                  468 	mov	a, #0x01
      000142rC0r05                  469 	mov	p, a
      000144 33 00                  470 	pop	af
      000146                        471 00117$:
      000146 01 11                  472 	sub	a, #1
      000148 20 0C                  473 	t0sn.io	f, c
      00014Ar50r19                  474 	goto	00118$
      00014C                        475 00119$:
      00014CrC0r0A                  476 	sl	p
      00014Er46r19                  477 	goto	00117$
      000150                        478 00118$:
      000150r00r0A                  479 	not	p
      000152 B0 00                  480 	mov.io	a, __pa
      000154r00r07                  481 	and	a, p
      000156 90 00                  482 	mov.io	__pa, a
                                    483 ;	main.c: 107: leds[index].on = 1;
      000158rC2r07                  484 	mov	a, _toggle_led_sloc11_1_0+0
      00015ArC0r05                  485 	mov	p, a
      00015C 01 17                  486 	mov	a, #0x01
      00015ErE0r00                  487 	idxm	p, a
      000160                        488 00104$:
                                    489 ;	main.c: 109: }
      000160 3A 00                  490 	ret
                                    491 ;	main.c: 111: void flash_led(uint8_t index)
                                    492 ;	-----------------------------------------
                                    493 ;	 function flash_led
                                    494 ;	-----------------------------------------
      000162                        495 _flash_led:
                                    496 ;	main.c: 117: for (uint8_t i = 0; i < 7; i++)
      000162r90r09                  497 	clear	_flash_led_sloc12_1_0+0
      000164                        498 00106$:
      000164rD0r07                  499 	mov	a, _flash_led_sloc12_1_0+0
      000166 07 11                  500 	sub	a, #0x07
      000168 20 0D                  501 	t1sn.io	f, c
      00016Ar84r19                  502 	goto	00108$
      00016C                        503 00136$:
                                    504 ;	main.c: 119: toggle_led(index);
      00016CrCFr07                  505 	mov	a, _flash_led_PARM_1+0
      00016ErC0r05                  506 	mov	_toggle_led_PARM_1+0, a
      000170rF6r1C                  507 	call	_toggle_led
                                    508 ;	main.c: 120: while (cnt++ < SHORT_DELAY) {}
      000172r80r09                  509 	clear	p
      000174                        510 00101$:
      000174rC0r07                  511 	mov	a, p
      000176r00r09                  512 	inc	p
      000178 D8 12                  513 	ceqsn	a, #0xd8
      00017A 00 00                  514 	nop
      00017C                        515 00137$:
      00017C 20 0C                  516 	t0sn.io	f, c
      00017Er74r19                  517 	goto	00101$
      000180                        518 00138$:
                                    519 ;	main.c: 117: for (uint8_t i = 0; i < 7; i++)
      000180r10r09                  520 	inc	_flash_led_sloc12_1_0+0
      000182r64r19                  521 	goto	00106$
      000184                        522 00108$:
                                    523 ;	main.c: 125: }
      000184 3A 00                  524 	ret
                                    525 ;	main.c: 127: void load_next_delay_target(uint8_t index)
                                    526 ;	-----------------------------------------
                                    527 ;	 function load_next_delay_target
                                    528 ;	-----------------------------------------
      000186                        529 _load_next_delay_target:
                                    530 ;	main.c: 129: leds[index].delay_target = (lfsr_shift(index) << 2) | (lfsr_shift(index) << 1) | lfsr_shift(index);
      000186rD1r07                  531 	mov	a, _load_next_delay_target_PARM_1+0
      000188 1B 00                  532 	sl	a
      00018A 1B 00                  533 	sl	a
      00018Cr11r06                  534 	add	a, _load_next_delay_target_PARM_1+0
      00018Er00r10                  535 	add	a, #(_leds + 0)
      000190 03 10                  536 	add	a, #0x03
      000192rD2r05                  537 	mov	_load_next_delay_target_sloc13_1_0+0, a
      000194rD1r07                  538 	mov	a, _load_next_delay_target_PARM_1+0
      000196rC0r05                  539 	mov	_lfsr_shift_PARM_1+0, a
      000198r54r1C                  540 	call	_lfsr_shift
      00019ArD3r05                  541 	mov	_load_next_delay_target_sloc14_1_0+0, a
      00019CrD3r0A                  542 	sl	_load_next_delay_target_sloc14_1_0+0
      00019ErD3r0A                  543 	sl	_load_next_delay_target_sloc14_1_0+0
      0001A0rD1r07                  544 	mov	a, _load_next_delay_target_PARM_1+0
      0001A2rC0r05                  545 	mov	_lfsr_shift_PARM_1+0, a
      0001A4r54r1C                  546 	call	_lfsr_shift
      0001A6 1B 00                  547 	sl	a
      0001A8r53r07                  548 	or	a, _load_next_delay_target_sloc14_1_0+0
      0001AArD4r05                  549 	mov	_load_next_delay_target_sloc15_1_0+0, a
      0001ACrD1r07                  550 	mov	a, _load_next_delay_target_PARM_1+0
      0001AErC0r05                  551 	mov	_lfsr_shift_PARM_1+0, a
      0001B0r54r1C                  552 	call	_lfsr_shift
      0001B2r54r07                  553 	or	a, _load_next_delay_target_sloc15_1_0+0
      0001B4rD5r05                  554 	mov	_load_next_delay_target_sloc16_1_0+0, a
      0001B6rD2r07                  555 	mov	a, _load_next_delay_target_sloc13_1_0+0
      0001B8rC0r05                  556 	mov	p, a
      0001BArD5r07                  557 	mov	a, _load_next_delay_target_sloc16_1_0+0
      0001BCrE0r00                  558 	idxm	p, a
                                    559 ;	main.c: 130: leds[index].delay_target += 2;
      0001BErD5r07                  560 	mov	a, _load_next_delay_target_sloc16_1_0+0
      0001C0 02 10                  561 	add	a, #0x02
      0001C2rC0r05                  562 	mov	p, a
      0001C4rD2r07                  563 	mov	a, _load_next_delay_target_sloc13_1_0+0
      0001C6rC0r09                  564 	xch	a, p
      0001C8rE0r00                  565 	idxm	p, a
                                    566 ;	main.c: 132: }
      0001CA 3A 00                  567 	ret
                                    568 ;	main.c: 134: void handle_tick()
                                    569 ;	-----------------------------------------
                                    570 ;	 function handle_tick
                                    571 ;	-----------------------------------------
      0001CC                        572 _handle_tick:
                                    573 ;	main.c: 136: for (uint8_t i = 0; i < 2; i++)
      0001CCr96r09                  574 	clear	_handle_tick_sloc17_1_0+0
      0001CE                        575 00108$:
      0001CErD6r07                  576 	mov	a, _handle_tick_sloc17_1_0+0
      0001D0 02 11                  577 	sub	a, #0x02
      0001D2 20 0D                  578 	t1sn.io	f, c
      0001D4r5Ar1A                  579 	goto	00110$
      0001D6                        580 00137$:
                                    581 ;	main.c: 138: leds[i].delay_count++;
      0001D6rD6r07                  582 	mov	a, _handle_tick_sloc17_1_0+0
      0001D8 1B 00                  583 	sl	a
      0001DA 1B 00                  584 	sl	a
      0001DCr16r06                  585 	add	a, _handle_tick_sloc17_1_0+0
      0001DEr00r10                  586 	add	a, #(_leds + 0)
      0001E0rD7r05                  587 	mov	_handle_tick_sloc18_1_0+0, a
      0001E2 04 10                  588 	add	a, #0x04
      0001E4rC0r05                  589 	mov	p, a
      0001E6rE1r00                  590 	idxm	a, p
      0001E8 01 10                  591 	add	a, #0x01
      0001EArD8r05                  592 	mov	_handle_tick_sloc19_1_0+0, a
      0001ECrE0r00                  593 	idxm	p, a
                                    594 ;	main.c: 139: if (leds[i].delay_count >= leds[i].delay_target) 
      0001EErD7r07                  595 	mov	a, _handle_tick_sloc18_1_0+0
      0001F0 03 10                  596 	add	a, #0x03
      0001F2rC0r05                  597 	mov	p, a
      0001F4rE1r00                  598 	idxm	a, p
      0001F6rC0r05                  599 	mov	p, a
      0001F8rD8r07                  600 	mov	a, _handle_tick_sloc19_1_0+0
      0001FAr40r06                  601 	sub	a, p
      0001FC 20 0C                  602 	t0sn.io	f, c
      0001FEr56r1A                  603 	goto	00109$
      000200                        604 00138$:
                                    605 ;	main.c: 141: if (leds[i].on)
      000200rD7r07                  606 	mov	a, _handle_tick_sloc18_1_0+0
      000202 01 10                  607 	add	a, #0x01
      000204rD9r05                  608 	mov	_handle_tick_sloc20_1_0+0, a
      000206rC0r05                  609 	mov	p, a
      000208rE1r00                  610 	idxm	a, p
      00020A 00 12                  611 	ceqsn	a, #0x00
      00020Cr10r1A                  612 	goto	00139$
      00020E                        613 00140$:
      00020Er38r1A                  614 	goto	00102$
      000210                        615 00139$:
                                    616 ;	main.c: 143: LED_OFF(leds[i].led);
      000210rD7r07                  617 	mov	a, _handle_tick_sloc18_1_0+0
      000212rC0r05                  618 	mov	p, a
      000214rE1r00                  619 	idxm	a, p
      000216 32 00                  620 	push	af
      000218 01 17                  621 	mov	a, #0x01
      00021ArC0r05                  622 	mov	p, a
      00021C 33 00                  623 	pop	af
      00021E                        624 00141$:
      00021E 01 11                  625 	sub	a, #1
      000220 20 0C                  626 	t0sn.io	f, c
      000222r28r1A                  627 	goto	00142$
      000224                        628 00143$:
      000224rC0r0A                  629 	sl	p
      000226r1Er1A                  630 	goto	00141$
      000228                        631 00142$:
      000228 B0 00                  632 	mov.io	a, __pa
      00022Ar40r07                  633 	or	a, p
      00022C 90 00                  634 	mov.io	__pa, a
                                    635 ;	main.c: 144: leds[i].on = 0;
      00022ErD9r07                  636 	mov	a, _handle_tick_sloc20_1_0+0
      000230rC0r05                  637 	mov	p, a
      000232 00 17                  638 	mov	a, #0x00
      000234rE0r00                  639 	idxm	p, a
      000236r3Er1A                  640 	goto	00103$
      000238                        641 00102$:
                                    642 ;	main.c: 148: flash_led(i);
      000238rD6r07                  643 	mov	a, _handle_tick_sloc17_1_0+0
      00023ArCFr05                  644 	mov	_flash_led_PARM_1+0, a
      00023Cr62r1D                  645 	call	_flash_led
      00023E                        646 00103$:
                                    647 ;	main.c: 151: load_next_delay_target(i);
      00023ErD6r07                  648 	mov	a, _handle_tick_sloc17_1_0+0
      000240rD1r05                  649 	mov	_load_next_delay_target_PARM_1+0, a
      000242r86r1D                  650 	call	_load_next_delay_target
                                    651 ;	main.c: 152: leds[i].delay_count = 0;
      000244rD6r07                  652 	mov	a, _handle_tick_sloc17_1_0+0
      000246 1B 00                  653 	sl	a
      000248 1B 00                  654 	sl	a
      00024Ar16r06                  655 	add	a, _handle_tick_sloc17_1_0+0
      00024Cr00r10                  656 	add	a, #(_leds + 0)
      00024E 04 10                  657 	add	a, #0x04
      000250rC0r05                  658 	mov	p, a
      000252 00 17                  659 	mov	a, #0x00
      000254rE0r00                  660 	idxm	p, a
      000256                        661 00109$:
                                    662 ;	main.c: 136: for (uint8_t i = 0; i < 2; i++)
      000256r16r09                  663 	inc	_handle_tick_sloc17_1_0+0
      000258rCEr19                  664 	goto	00108$
      00025A                        665 00110$:
                                    666 ;	main.c: 155: }
      00025A 3A 00                  667 	ret
                                    668 ;	main.c: 157: void main(void) {
                                    669 ;	-----------------------------------------
                                    670 ;	 function main
                                    671 ;	-----------------------------------------
      00025C                        672 _main:
                                    673 ;	main.c: 159: uint16_t cnt = 0;
      00025Cr9Ar09                  674 	clear	_main_sloc21_1_0+0
      00025Er9Br09                  675 	clear	_main_sloc21_1_0+1
                                    676 ;	main.c: 160: sys_init();
      000260r00r1C                  677 	call	_sys_init
                                    678 ;	main.c: 161: lfsr_init();
      000262rD8r1C                  679 	call	_lfsr_init
                                    680 ;	main.c: 167: while (cnt++ < delay) {}
      000264                        681 00101$:
      000264rDBr07                  682 	mov	a, _main_sloc21_1_0+1
      000266rC0r05                  683 	mov	p, a
      000268rDAr07                  684 	mov	a, _main_sloc21_1_0+0
      00026Ar1Ar09                  685 	inc	_main_sloc21_1_0+0
      00026Cr1Br08                  686 	addc	_main_sloc21_1_0+1
      00026E 3A 11                  687 	sub	a, #0x3a
      000270 0A 17                  688 	mov	a, #0x0a
      000272rC0r09                  689 	xch	a, p
      000274rC0r06                  690 	subc	a, p
      000276 20 0C                  691 	t0sn.io	f, c
      000278r64r1A                  692 	goto	00101$
      00027A                        693 00121$:
                                    694 ;	main.c: 168: cnt = 0;        
      00027Ar9Ar09                  695 	clear	_main_sloc21_1_0+0
      00027Cr9Br09                  696 	clear	_main_sloc21_1_0+1
                                    697 ;	main.c: 169: handle_tick();
      00027ErCCr1D                  698 	call	_handle_tick
      000280r64r1A                  699 	goto	00101$
                                    700 ;	main.c: 179: }
      000282 3A 00                  701 	ret
                                    702 	.area CODE
                                    703 	.area CONST
                                    704 	.area CABS (ABS)
